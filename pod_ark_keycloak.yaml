apiVersion: v1
kind: Pod
metadata:
  labels:
    app: keycloak
  name: keycloak
spec:
  containers:
  - env:
    # update to AWS when provisioned
    image: docker.io/nathanobert/ark_keycloak:latest
    imagePullPolicy: Always
#
#   Troubleshooting
#   command: ["/bin/sleep", "180d"]

#
#   Documentation: https://www.keycloak.org/guides#server
#
    command: [ "/opt/keycloak/bin/kc.sh", "start-dev", "--http-port", "8080", "--hostname-url", "https://documentum-k8s1.appdev.armedia.com", "--hostname-admin-url", "https://documentum-k8s1.appdev.armedia.com", "--db", "postgres", "--db-password", "pass", "--db-schema", "public", "--db-url-host", "db", "--db-username", "user", "--db-url-database", "db", "--log-console-output=default", "--import-realm" ]
    name: keycloak
    ports:
    - containerPort: 8080
      name: console
      protocol: TCP

#
# Probe Example
#
# [n.obert_dev@iad032-1san04 ark_keycloak]$ curl https://documentum-k8s1.appdev.armedia.com/health/ready
# {
#    "status": "UP",
#    "checks": [
#        {
#            "name": "Keycloak database connections async health check",
#            "status": "UP"
#        }
#    ]

    readinessProbe:
      httpGet:
        port: 8080
        scheme: HTTP
        path: /health/ready
      initialDelaySeconds: 15
      failureThreshold: 10
      periodSeconds: 10
    livenessProbe:
      httpGet:
        port: 8080
        scheme: HTTP
        path: /health/ready
      initialDelaySeconds: 15
      failureThreshold: 10
      periodSeconds: 10
  hostname: keycloak
  imagePullSecrets:
  # update to AWS when provisioned
  - name: docker-io-nathanobert
# - name: aws-arkcase-pull
